//! TLS client
use handshake::handshake::{ClientHello, HandshakeMsg, HandshakeType};
use handshake::primitives::{ContentType, ProtocolVersion};
use handshake::record::OpaqueRecord;
use handshake::traits::Deserializable;
use std::io::{Read, Write};
use std::net::TcpStream;

// This is technically a replay attack! But hopefully the cyberpolice don't come after me
const CLIENT_HELLO_BYTES: [u8; 243] = [
    0x16, 0x03, 0x03, 0x00, 0xEE, 0x01, 0x00, 0x00, 0xEA, 0x03, 0x03, 0x30, 0x3E, 0xB7, 0xF6, 0x6F,
    0xAC, 0x63, 0x01, 0xFE, 0x65, 0x33, 0xB1, 0xB6, 0xCC, 0xBC, 0x63, 0x63, 0x67, 0x46, 0x17, 0x6B,
    0xEC, 0x1A, 0x47, 0x2B, 0xB3, 0x8C, 0xBE, 0xFC, 0x84, 0xAD, 0x11, 0x20, 0x3E, 0x80, 0xEA, 0xAB,
    0x85, 0x9A, 0xD5, 0x3C, 0x6B, 0xFA, 0x3A, 0xB3, 0x41, 0x41, 0x67, 0x41, 0xF1, 0x0C, 0x5F, 0x5F,
    0xCE, 0x12, 0x67, 0x05, 0xD5, 0xF3, 0xB4, 0x91, 0xC3, 0xED, 0x73, 0x06, 0x00, 0x14, 0x13, 0x02,
    0x13, 0x01, 0x13, 0x03, 0xC0, 0x2C, 0xC0, 0x2B, 0xCC, 0xA9, 0xC0, 0x30, 0xC0, 0x2F, 0xCC, 0xA8,
    0x00, 0xFF, 0x01, 0x00, 0x00, 0x8D, 0x00, 0x0D, 0x00, 0x16, 0x00, 0x14, 0x06, 0x03, 0x05, 0x03,
    0x04, 0x03, 0x08, 0x07, 0x08, 0x06, 0x08, 0x05, 0x08, 0x04, 0x06, 0x01, 0x05, 0x01, 0x04, 0x01,
    0x00, 0x0B, 0x00, 0x02, 0x01, 0x00, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x06, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00,
    0x2D, 0x00, 0x02, 0x01, 0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1D, 0x00, 0x20, 0xC9,
    0x95, 0x87, 0x67, 0xE3, 0x8D, 0x0D, 0x6E, 0xF9, 0x5A, 0x71, 0x97, 0xAE, 0xF7, 0x95, 0x23, 0x6A,
    0x0E, 0xB3, 0x4B, 0x30, 0x43, 0x9B, 0x93, 0xBF, 0xAF, 0x25, 0xAB, 0x75, 0xEF, 0x40, 0x10, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x05, 0x04, 0x03, 0x04, 0x03, 0x03, 0x00, 0x00, 0x00, 0x13,
    0x00, 0x11, 0x00, 0x00, 0x0E, 0x61, 0x70, 0x69, 0x2E, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2E,
    0x63, 0x6F, 0x6D,
];

pub fn replay(mut stream: TcpStream) {
    stream.write(&CLIENT_HELLO_BYTES).unwrap();

    let mut response = [0u8; 1 << 14 + 5];
    stream.read(&mut response).unwrap();
    let (record, _) = OpaqueRecord::deserialize(&response, ()).unwrap();
    println!("received {record}");
}

fn main() {
    let mut stream = TcpStream::connect("www.github.com:443").unwrap();
    // replay(stream);

    let client_hello = ClientHello::with_sane_defaults();
    let client_hello = HandshakeMsg {
        msg_type: HandshakeType::ClientHello,
        length: client_hello.size().try_into().unwrap(),
        payload: handshake::handshake::Payload::ClientHello(client_hello),
    };
    let client_hello = OpaqueRecord {
        content_type: ContentType::Handshake,
        legacy_record_version: ProtocolVersion::Tls_1_2,
        length: client_hello.size().try_into().unwrap(),
        fragment: handshake::record::Payload::Handshake(client_hello),
    };
    let mut buffer = [0u8; 1 << 12];
    let written = client_hello.serialize(&mut buffer).unwrap();

    let transmitted = stream.write(buffer.get(..written).unwrap()).unwrap();
    println!("Transmitted {transmitted} bytes");

    let received = stream.read(&mut buffer).unwrap();
    println!("{:?}", &buffer[..received]);
    let (record, _) = OpaqueRecord::deserialize(&buffer, ()).unwrap();
    println!("received {record}");
}
